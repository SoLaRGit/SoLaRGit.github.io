<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-open.dicom.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><script type="text/javascript" src="../scripts/bugfix.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Introduction to the Open High Performance Counters (open.hpc) library</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Something" /><meta name="Microsoft.Help.F1" content="Help" /><meta name="Microsoft.Help.Id" content="05ba8cb6-b0b2-40b4-9878-5afefbddab3e" /><meta name="Description" content="Welcome to : Open High Performance Counters (open.hpc) library documentation" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Open High Performance Counters (open.hpc) library documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/05ba8cb6-b0b2-40b4-9878-5afefbddab3e.htm" title="Open High Performance Counters (open.hpc) library documentation" tocid="roottoc">Open High Performance Counters (open.hpc) library documentation</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="../html/05ba8cb6-b0b2-40b4-9878-5afefbddab3e.htm" title="Introduction to the Open High Performance Counters (open.hpc) library" tocid="05ba8cb6-b0b2-40b4-9878-5afefbddab3e">Introduction to the Open High Performance Counters (open.hpc) library</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/6bf10909-dac2-dc51-ffe2-2c951497ca4b.htm" title="open.hpc" tocid="6bf10909-dac2-dc51-ffe2-2c951497ca4b">open.hpc</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Introduction to the Open High Performance Counters (open.hpc) library</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>Welcome to : Open High Performance Counters (open.hpc) library documentation</p><p>This library helps meter the code performance during the execution and prints metered statistics.</p><p>For details on each class see following topics:</p><p>
        - <a href="edbbd9c4-e86c-81b5-736e-9bd265586499.htm">HPCMeter</a> is a meter to be tracked.
      </p><p>
        - <a href="909560e0-bb8e-bade-a838-5a904becb19c.htm">HPCMeterCollection</a> is collection of tracked meters.
      </p><p>
        - <a href="7241b43d-0784-9664-f0f7-c48cdb038a05.htm">HPCMeterSum</a> is used to track single meter in `using` context code block.
      </p><p>Output samples:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABDAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABDAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABDAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">RELEASE

HPC v21.1205.0.0, MSIL @ 2021-12-06 22:59:35 [Amd64|JITOpt] (AMD64 ILOnly,64b)
Collection[1001]::ShowStatistics() from open.HighPerformanceCountersTest.Program::Main()
open.HighPerformanceCountersTest : [Amd64|JITOpt] (AMD64 ILOnly,64b)
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ meter       :    sumtime  /     cnt ~    average  [    %] |    times *    time.min [++] ~    time.max [++] :     max-min (    max-avrg ,    avrg-min ) over time improving  │
├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ meterIn1    : 0.205389275 / 1000000 ~ 0.000000205 [1.033] | 3906.621 * 0.000000000 [ 1] ~ 0.000390662 [10] : 0.000390662 ( 0.000390457 , 0.000000205 ) ++++++++++++++++++++ │
│ meterIn2    : 0.198855692 / 1000000 ~ 0.000000199 [1.000] | 2625.100 * 0.000000000 [ 2] ~ 0.000262510 [ 8] : 0.000262510 ( 0.000262311 , 0.000000199 ) ++++++++++++++++++++ │
│ meterOut1   : 0.315019794 /     100 ~ 0.003150198 [1.015] |    1.505 * 0.002701123 [13] ~ 0.004065182 [ 4] : 0.001364059 ( 0.000914984 , 0.000449075 ) .................... │
│ meterOut2   : 0.310410664 /     100 ~ 0.003104107 [1.000] |    1.180 * 0.003011108 [ 3] ~ 0.003552574 [ 7] : 0.000541466 ( 0.000448467 , 0.000092999 ) .................... │
│ meterThread : 0.625848115 /       2 ~ 0.312924058 [1.000] |    1.014 * 0.310811566 [ 1] ~ 0.315036550 [ 2] : 0.004224984 ( 0.002112492 , 0.002112492 ) .................... │
│ total       : 0.357761764 /       1 ~ 0.357761764 [1.000] |          *             [  ] ~             [  ] :             (             ,             )                      │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

DEBUG

HPC v21.1205.0.0, MSIL @ 2021-12-06 23:00:24 [Amd64|JITTrack,E&amp;C] (AMD64 ILOnly,64b)
Collection[1001]::ShowStatistics() from open.HighPerformanceCountersTest.Program::Main()
  open.HighPerformanceCountersTest : [Amd64|JITTrack,E&amp;C] (AMD64 ILOnly,64b)
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ meter       :    sumtime  /     cnt ~    average  [    %] |    times *    time.min [++] ~    time.max [++] :     max-min (    max-avrg ,    avrg-min ) over time improving  │
├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
│ meterIn1    : 0.394034692 / 1000000 ~ 0.000000394 [1.005] | 2017.000 * 0.000000310 [ 3] ~ 0.000625866 [ 4] : 0.000625556 ( 0.000625472 , 0.000000084 ) ++++++++++++++++++++ │
│ meterIn2    : 0.391959125 / 1000000 ~ 0.000000392 [1.000] | 1151.000 * 0.000000310 [ 3] ~ 0.000357150 [ 2] : 0.000356840 ( 0.000356758 , 0.000000082 ) ++++++++++++++++++++ │
│ meterOut1   : 0.495343084 /     100 ~ 0.004953431 [1.007] |    1.210 * 0.004831612 [ 5] ~ 0.005844727 [ 4] : 0.001013115 ( 0.000891296 , 0.000121819 ) .................... │
│ meterOut2   : 0.491864051 /     100 ~ 0.004918641 [1.000] |    1.170 * 0.004823234 [ 7] ~ 0.005641794 [ 2] : 0.000818560 ( 0.000723153 , 0.000095407 ) .................... │
│ meterThread : 0.987987218 /       2 ~ 0.493993609 [1.000] |    1.006 * 0.492551666 [ 1] ~ 0.495435553 [ 2] : 0.002883887 ( 0.001441943 , 0.001441943 ) .................... │
│ total       : 0.518869382 /       1 ~ 0.518869382 [1.000] |          *             [  ] ~             [  ] :             (             ,             )                      │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABDAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">header explanation:

    examples:

    HPC v21.1205.0.0, MSIL [Amd64|JITTrack,E&amp;C] (AMD64 ILOnly,64b) @ 2021-12-06 23:42:41
    Collection[1001]::ShowStatistics() from open.HighPerformanceCountersTest.Program::Main()
      open.HighPerformanceCountersTest : [Amd64|JITTrack,E&amp;C] (AMD64 ILOnly,64b)

    HPC v21.1205.0.0, MSIL @ 2021-12-06 00:37:21 [X86|JITOpt] (I386 ILOnly,32b)
    Collection[1001]::ShowStatistics() from JpegLs.DotNet.Program::Main()
      JpegLSTest : [X86|JITOpt] (I386 ILOnly,32b)

 - first line "HPC v[HPC version], [compiled HPC arch] @ [run date and time] [JIT HPC arch|JIT compiled flags] (PE HPC arch, PE flags)

    HPC version       : a HPC library version

    JIT HPC arch      : a running HPC assembly compiled JIT processor architecture :
                          Amd64     : 64-bit machine code;
                          X86       : 32-bit machine code;
                          IA64      : Itanium 64-bit machine code;
                          ARM       : ARM (64-bit) machine code;

    JIT flags         : a running HPC assembly compiled JIT flags :
                          JITTrack  : JIT tracking enabled;
                          JITOpt    : Optimization enabled; 
                          E&amp;C       : Edit and Continue(debug);

    PE HPC Arch       : PE header of HPC assembly that is running :
                          I386      : PE Header is I386 architecture,
                          AMD64     : PE Header is AMD64 architecture,
                          IA64      : PE Header is IA64 architecture,
                          ARM       : PE Header is ARM architecture,

    PE flags          : PE header flags of HPC assembly that is running :
                          ILOnly    : managed code only;
                          64b       : 64-bit process;
                          32b       : 32-bit process;
                          NotPE     : assembly has no PE header (not possible);
                          Pure      : C++ assembly with Pure Managed code;
                          Pref32b   : If prefer 32-bit was enabled during the compile;

    run date and time : a time of compiling this output

 - second line "Collection[Collection Id]::ShowStatistics() from [Calling Method]()"

    Collection Id     : a meter collection id

    Calling Method    : a fully qualified code path to calling method

 - third line "  JpegLSTest : [JIT HPC arch|JIT compiled flags] (PE HPC arch, PE flags)"
    see first line for details

columns explanation:

 - meter     : meter name assigned during instancing of the meter class
 - sumtime   : total summed time of all runs
 - cnt                 : number of times this meter was used to sum the time
 - average   : averaged data (sumtime / cnt)
 - %         : for group of meters having same 'cnt' resulting in percent [1..*] from fastest meter.
 - times         : result of division between 'time.max' and 'time.min'
 - time.min  : lowest measured time
 - [++]      : number of times time.min was updated.
 - time.max  : highest measured time
 - [++]      : number of times time.max was updated.
 - max-min   : difference between time.max and time.min
 - max-avrg  : difference between time.max and average
 - avrg-min  : difference between average and time.min
 - over time : graphical display of speed improvement over time,
   improving : and not the exact science, read JIT notes from above.</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAADAAA");</script></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>